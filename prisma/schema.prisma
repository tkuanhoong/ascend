datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

enum UserRole {
  USER
  ADMIN
}

enum SectionLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseStatus {
  DRAFT
  PENDING
  PUBLISHED
  UNPUBLISHED
  REJECTED
  REVOKED
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  identificationNo String
  emailVerified    DateTime?
  image            String?
  password         String?
  role             UserRole  @default(USER)

  purchases Purchase[]
  backups   Backup[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model Course {
  id          String       @id @default(cuid())
  userId      String
  title       String       @db.Text
  description String?      @db.Text
  imageUrl    String?      @db.Text
  price       Float?
  status      CourseStatus @default(DRAFT)
  reason      String?      @db.Text
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  purchases Purchase[]
  sections  Section[]

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  courses Course[]
}

model Section {
  id            String        @id @default(cuid())
  title         String
  position      Int
  level         SectionLevel?
  estimatedTime Int?
  isFree        Boolean       @default(false)
  isPublished   Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  chapters Chapter[]

  @@index([courseId])
}

model Chapter {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  position    Int
  isFree      Boolean  @default(false)
  isPublished Boolean  @default(false)
  videoUrl    String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  video       Video?
  attachments Attachment[]

  userProgress UserProgress[]

  @@index([sectionId])
}

model Video {
  id         String  @id @default(cuid())
  assetId    String
  playbackId String?
  isReady    Boolean @default(false)

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([chapterId])
}

model Purchase {
  id        String   @id @default(cuid())
  amount    Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId, userId])
}

model Attachment {
  id   String @id @default(cuid())
  name String
  url  String @db.Text

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
}

model StripeCustomer {
  id               String @id @default(cuid())
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProgress {
  id     String @id @default(cuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Backup {
  id        String   @id @default(cuid())
  fileName  String
  fileUrl   String
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
}
